-name: install shipping component
 hosts: shipping
 become: yes
 tasks: 
  - name: install maven
    ansible.builtin.dnf:
     name: maven
     state: yes

  - name: create user
    ansibile.builtin.user:
     name: roboshop

  - name: recruisvely remove directory
    ansible.builtin.file:
    path: /app
    state: absent
    
  - name: create directory
    ansible.builtin.file:
    path: /app
    state: directory

  - name: download shipping.service
    ansible.builtin.get_url:
     url: curl -L -o /tmp/shipping.zip https://roboshop-builds.s3.amazonaws.com/shipping.zip
     dest: /tmp 

  - name: extract shipping.service
    ansible.builtin.unarchieve:
     src: /tmp/shipping.zip
     dest: /app
     remote_src: yes

  - name: install dependencies
    ansible.builtin.dnf:
     name: mvn clean package

  - name: rename jar file 
    ansible.builtin.command: mv target/shipping-1.0.jar shipping.jar          

  - name: copy shipping service
    ansible.builtin.copy:
      src: shipping.service
      dest: /etc/systemd/system/shipping.service

  - name: deamon realod and start
    ansible.builtin.systemd_service:
      daemon_reload: true

  - name: install mysql client
    ansible.builtin.dnf:
      name: mysql
      state: present

  - name: check cities schema exists or not
    ansible.builtin.command:  mysql -h mysql.daws76s.online -uroot -p{{mysql_password}} -sN -e "SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'cities'"
     register: schema

  - name: print output
    ansible.builtin.debug:
      msg: "schema output: {{schema}}"

  - name: load cities data
    ansible.builtin.shell: "mysql -h mysql.daws76s.online -uroot -p{{mysql_password}}  < /app/schema/shipping.sql"
    when: schema.stdout != "1"

  - name: start and enable shipping
    ansible.builtin.service:
      name: shipping
      state: restarted
      enabled: yes

    